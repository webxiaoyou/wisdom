version: '3'

services:
  # MySQL 8 服务
  mysql:
    image: mysql:8
    container_name: wisdom-mysql
    environment:
      MYSQL_ROOT_PASSWORD: '123456'  # MySQL root 用户密码
    ports:
      - '3306:3306'  # 映射宿主机端口到容器端口
    volumes:
      - ./.mysql-data:/var/lib/mysql # 将数据目录挂载到本地目录以进行持久化
      - ./mysql-init:/docker-entrypoint-initdb.d  # 初始化 SQL 脚本目录
    restart: always # 崩溃后自动重启
    networks:
      - wisdom-network

  # Redis 6 服务
  redis:
    image: 'redis:6'
    container_name: wisdom-redis
    ports:
      - '6379:6379'  # 映射宿主机端口到容器端口
    restart: always # 崩溃后自动重启
    networks:
      - wisdom-network

  minio:
    image: minio/minio:latest
    container_name: wisdom-minio
    ports:
      - "9000:9000"  # 映射宿主机端口到容器端口
      - "9001:9001"  # MinIO 控制台的端口
    env_file:
      - minio.env  # 引用 minio.env 文件
#    environment:
#      MINIO_ROOT_USER: ${MINIO_ROOT_USER}  # MinIO 根用户的用户名
#      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}  # MinIO 根用户的密码
#      MINIO_ACCESS_KEY: AyjH7pZEbwWGUi6mxvzr  # MinIO 根用户的 Access Key
#      MINIO_SECRET_KEY: YkKQbBGhbzHrjg4nxCfTT44MAvE0R4q8H0fSsdvz  # MinIO 根用户的 Secret Key
    volumes:
      - ./.minio-data:/data  # 将数据目录挂载到本地目录以进行持久化
    command: server /data --console-address ":9001"  # 启动MinIO服务器，指定数据目录和控制台地址
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]  # 健康检查，用于确保MinIO服务正常运行
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - wisdom-network

  create-bucket:
    image: minio/mc:latest
    entrypoint: /bin/sh
    depends_on:
      - minio
    command:
      - -c
      - |
        sleep 10  # 等待MinIO启动
        mc alias set minio http://minio:9000 minioadmin minioadmin123  # 设置MinIO客户端登录账号与密码
        mc mb minio/wisdom  # 创建MinIO存储桶
        mc anonymous set public minio/wisdom  # 设置MinIO存储桶的访问策略为public
    networks:
      - wisdom-network





networks:
  wisdom-network:
